#!/usr/bin/env bash
#
# Perform all updates

# -----------------------------------------------------------------------------
# | Errors                                                                     |
# -----------------------------------------------------------------------------

declare -r E_OS_UPDATE_FAILURE=101
declare -r E_BREW_UPDATE_FAILURE=102
declare -r E_NPM_UPDATE_FAILURE=103
declare -r E_RUBY_UPDATE_FAILURE=104
declare -r E_PIP_UPDATE_FAILURE=105
declare -r E_PIP3_UPDATE_FAILURE=106
declare -r E_OPAM_UPDATE_FAILURE=107

# -----------------------------------------------------------------------------
# | Global variables                                                           |
# -----------------------------------------------------------------------------



# -----------------------------------------------------------------------------
# | Update Functions                                                           |
# -----------------------------------------------------------------------------

update_osx() {
    start_spinner "Updating OSX (if system restarts during bootstrap, run 'cd ${HOME} && ./dotfiles/script/bootstrap')"
    sudo softwareupdate -ia >> "${ERROR_FILE}" 2>&1 > /dev/null
    status_stop_spinner "Finished updating OSX"
    exit_on_fail "OSX update failed" "${E_OS_UPDATE_FAILURE}"
}

update_ubuntu() {
    start_spinner "Updating Ubuntu (if system restarts during bootstrap, run 'cd ${HOME} && ./dotfiles/script/bootstrap')"
    sudo apt-get update -qqy >> "${ERROR_FILE}" 2>&1 > /dev/null \
        && sudo apt-get upgrade -qqy >> "${ERROR_FILE}" 2>&1 > /dev/null
    status_stop_spinner "Finished updating Ubuntu"
    exit_on_fail "Ubuntu update failed" "${E_OS_UPDATE_FAILURE}"
}

update_homebrew() {
    start_spinner "Updating Homebrew"
    brew update >> "${ERROR_FILE}" 2>&1 > /dev/null \
       && brew upgrade --all >> "${ERROR_FILE}" 2>&1 > /dev/null \
       && brew cleanup >> "${ERROR_FILE}" 2>&1 > /dev/null
    status_stop_spinner "Finished updating Homebrew"
    exit_on_fail "Homebrew update failed" "${E_BREW_UPDATE_FAILURE}"
}

# TODO: update nvm
update_npm() {
    start_spinner "Updating NodeJS"
    npm install -g npm >> "${ERROR_FILE}" 2>&1 > /dev/null \
        && npm update -g >> "${ERROR_FILE}" 2>&1 > /dev/null
    status_stop_spinner "Finished updating NodeJS"
    exit_on_fail "NodeJS update failed" "${E_NPM_UPDATE_FAILURE}"
}

# TODO: update rbenv
update_gems() {
    start_spinner "Updating Ruby"
    gem update >> "${ERROR_FILE}" 2>&1 > /dev/null
    status_stop_spinner "Finished updating Ruby"
    if [[ "$?" -ne 0 ]]; then
        # Only use sudo for system ruby
        start_spinner "Updating system Ruby"
        sudo gem update >> "${ERROR_FILE}" 2>&1 > /dev/null
        status_stop_spinner "Finished updating Ruby"
        exit_on_fail "Ruby update failed" "${E_RUBY_UPDATE_FAILURE}"
    fi
}

# TODO: update other packages?
update_pip() {
    start_spinner "Updating Python 2.x"
    pip install --upgrade pip setuptools >> "${ERROR_FILE}" 2>&1 > /dev/null
    status_stop_spinner "Finished updating Python 2.x"
    exit_on_fail "Python 2.x update failed" "${E_PIP_UPDATE_FAILURE}"
}

update_pip3() {
    start_spinner "Updating python 3.x"
    pip3 install --upgrade pip setuptools >> "${ERROR_FILE}" 2>&1 > /dev/null
    status_stop_spinner "Finished updating Python 3.x"
    exit_on_fail "Python 3.x update failed" "${E_PIP3_UPDATE_FAILURE}"
}

update_opam() {
    start_spinner "Updating Opam"
    opam update >> "${ERROR_FILE}" 2>&1 > /dev/null \
       && brew upgrade >> "${ERROR_FILE}" 2>&1 > /dev/null
    status_stop_spinner "Finished updating Opam"
    exit_on_fail "Opam update failed" "${E_OPAM_UPDATE_FAILURE}"
}

# -----------------------------------------------------------------------------
# | Main                                                                       |
# -----------------------------------------------------------------------------

main() {
    # switch path to script source
    cd "$(dirname "${BASH_SOURCE}")"
    if [[ "$?" -ne 0 ]]; then
        echo "Error: Could not find script"
        exit 1
    fi

    source "../script/utils.sh" &> /dev/null || source "${DOTS}/script/utils.sh" &> /dev/null
    if [[ "$?" -ne 0 ]]; then
        echo "Error: dotfile utils not found"
        exit 1
    fi

    # Ask for the administrator password upfront
    sudo -v

    # Keep-alive: update existing `sudo` time stamp until the script has finished
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

    if [[ "$#" -eq 0 ]]; then
        set -- "all"
    fi

    # Run sections based on command line arguments
    # update all|os|brew|npm|gem|pip|pip3
    for ARG in "$@"; do
        if [ $ARG == "brew" ] || [ $ARG == "all" ]; then
            if cmd_exists 'brew'; then
                update_homebrew
                exit_on_fail "Homebrew update failed"
            fi
        fi
        if [ $ARG == "npm" ] || [ $ARG == "all" ]; then
            if cmd_exists 'npm'; then
                update_npm
                exit_on_fail "NPM update failed"
            fi
        fi
        if [ $ARG == "gem" ] || [ $ARG == "all" ]; then
            if cmd_exists 'gem'; then
                update_gems
                exit_on_fail "gem update failed"
            fi
        fi
        if [ $ARG == "pip" ] || [ $ARG == "all" ]; then
            if cmd_exists 'pip'; then
                update_pip
                exit_on_fail "pip update failed"
            fi
        fi
        if [ $ARG == "pip3" ] || [ $ARG == "all" ]; then
            if cmd_exists 'pip3'; then
                update_pip3
                exit_on_fail "pip3 update failed"
            fi
        fi
        if [ $ARG == "opam" ] || [ $ARG == "all" ]; then
            if cmd_exists 'opam'; then
                update_opam
                exit_on_fail "opam update failed"
            fi
        fi
        if [ $ARG == "os" ] || [ $ARG == "all" ]; then
            local -r OS="$(get_os)"
            if [[ "${OS}" == "osx" ]]; then
                update_osx
                exit_on_fail "OSX update failed"
            elif [[ "${OS}" == "ubuntu" ]]; then
                update_ubuntu
                exit_on_fail "Ubuntu update failed"
            fi
        fi
    done
}

main "$@"
