#!/usr/bin/env bash
#
# update dotfiles from git and install

# -----------------------------------------------------------------------------
# | Errors                                                                     |
# -----------------------------------------------------------------------------

declare -r E_OS_NOT_SUPPORTED=101
declare -r E_TERMINAL_THEME_FAILURE=102

# -----------------------------------------------------------------------------
# | Global variables                                                           |
# -----------------------------------------------------------------------------

declare -r INIT_SECTION=0 # init
declare -r REPO_SECTION=1 # repo
declare -r DIR_SECTION=2  # dir
declare -r LINK_SECTION=3 # link
declare -r TOOL_SECTION=4 # tool
declare -r APPS_SECTION=5 # app
declare -r PREF_SECTION=6 # pref
declare -r EXTR_SECTION=7 # extra
declare -r TEST_SECTION=8 # test

# -----------------------------------------------------------------------------
# | System                                                                     |
# -----------------------------------------------------------------------------

# is_supported_version(actual, expected): test if compatible version
is_supported_version() {
    declare -a v1="${1//./ }"
    declare -a v2="${2//./ }"
    local i=""

    # Fill empty positions in v1 with zeros
    for (( i="${#v1[@]}"; i<"${#v2[@]}"; i++ )); do
        v1[i]=0
    done

    for (( i=0; i<"${#v1[@]}"; i++ )); do
        # Fill empty positions in v2 with zeros
        if [[ -z "${v2[i]}" ]]; then
            v2[i]=0
        fi
        # test if version is valid
        if [[ 10#"${v1[i]}" < 10#"${v2[i]}" ]]; then
            return 1
        fi
    done

    return 0
}

# verify_os(): verify current computer is running a supported os
#   Supported: OSX
verify_os() {
    declare -r OS="$(get_os)"
    declare OS_VERSION=""

    # OSX El Capitan
    declare -r MINIMUM_OS_X_VERSION="10.11"
    # Ubuntu Trusty
    declare -r MINIMUM_UBUNTU_VERSION="14.04"

    if [[ "${OS}" == "osx" ]]; then
        OS_VERSION="$(sw_vers -productVersion)"
        is_supported_version "${OS_VERSION}" "${MINIMUM_OS_X_VERSION}" \
            && return 0 \
            || print_error "Sorry, this script is intended only for OS X ${MINIMUM_OS_X_VERSION}+\n"
    elif [[ "${OS}" == "ubuntu" ]]; then
        OS_VERSION="$(lsb_release -d | cut -f2 | cut -d' ' -f2)"
        is_supported_version "${OS_VERSION}" "${MINIMUM_UBUNTU_VERSION}" \
            && return 0 \
            || printf "Sorry, this script is intended only for Ubuntu ${MINIMUM_UBUNTU_VERSION}+\n"
    else
        print_error 'Sorry, this script is intended only for OS X!\n'
    fi

    return 1
}

# -----------------------------------------------------------------------------
# | Terminal                                                                   |
# -----------------------------------------------------------------------------

set_osx_terminal() {
    osascript >> "${ERROR_FILE}" 2>&1 > /dev/null <<EOD

tell application "Terminal"

    local allOpenedWindows
    local initialOpenedWindows
    local windowID
    set themeName to "Hellowor1d2"

    (* Store the IDs of all the open terminal windows. *)
    set initialOpenedWindows to id of every window

    (* Open the custom theme so that it gets added to the list
       of available terminal themes (note: this will open two
       additional terminal windows). *)
    do shell script "open '$HOME/dotfiles/resources/" & themeName & ".terminal'"

    (* Wait a little bit to ensure that the custom theme is added. *)
    delay 1

    (* Set the custom theme as the default terminal theme. *)
    set default settings to settings set themeName

    (* Get the IDs of all the currently opened terminal windows. *)
    set allOpenedWindows to id of every window

    repeat with windowID in allOpenedWindows

        (* Close the additional windows that were opened in order
           to add the custom theme to the list of terminal themes. *)
        if initialOpenedWindows does not contain windowID then
            close (every window whose id is windowID)

        (* Change the theme for the initial opened terminal windows
           to remove the need to close them in order for the custom
           theme to be applied. *)
        else
            set current settings of tabs of (every window whose id is windowID) to settings set themeName
        end if

    end repeat

end tell

EOD
    status "Set terminal.app theme" "${E_TERMINAL_THEME_FAILURE}"
}

# -----------------------------------------------------------------------------
# | Functions                                                                  |
# -----------------------------------------------------------------------------

# end_prompt(): pause program before termination if no automatic restart
end_prompt() {
    print_in_blue "\n Press any key to continue... "
    read -n 1 &> /dev/null
    printf "\n"
}

# -----------------------------------------------------------------------------
# | Main                                                                       |
# -----------------------------------------------------------------------------

main() {
    # switch path to script source
    cd "$(dirname "${BASH_SOURCE}")"
    if [[ "$?" -ne 0 ]]; then
        echo "Error: Could not find script source"
        exit 1
    fi

    source "../script/utils.sh" &> /dev/null || source "${DOTS}/script/utils.sh" &> /dev/null
    if [[ "$?" -ne 0 ]]; then
        echo "Error: dotfile utils not found"
        exit 1
    fi

    # verify that the current os is supported
    # declares global OS (current operating system)
    verify_os || errexit "Error: OS is not suported" "${E_OS_NOT_SUPPORTED}"

    clear
    print_section "Beginning bootstrap script"

    # if boostrap was run before, remove existing logs
    ./cleanup_logs.sh

    # Confirm fresh or existing install
    local fresh=1
    local bootstrap_section=0
    confirm "Is this a fresh install?"
    if status_code; then
        fresh=0
        print_fix "Installing all components!"
        declare -r OS="$(get_os)"
        if [[ "${OS}" == "osx" ]]; then
            confirm "Use Terminal.app theme?"
            if status_code; then
                set_osx_terminal
                exit_on_fail "Error setting up terminal app"
            fi
        fi
    else
        fresh=1
        print_fix "Running updates..."
        # if an argument was provided to bootstrap, set the relevant section
        if [[ "$#" -eq 1 ]]; then
            if is_number "$1" && [[ "$1" -gt 0 ]]; then
                # set section to any positive integer
                bootstrap_section="$1"
            else
                # TODO add --cont flag otherwise run just 1 section
                if [[ "$1" == "init" ]]; then
                    bootstrap_section="${INIT_SECTION}"
                elif [[ "$1" == "repo" ]]; then
                    bootstrap_section="${REPO_SECTION}"
                elif [[ "$1" == "dir" ]]; then
                    bootstrap_section="${DIR_SECTION}"
                elif [[ "$1" == "link" ]]; then
                    bootstrap_section="${LINK_SECTION}"
                elif [[ "$1" == "app" ]]; then
                    bootstrap_section="${APPS_SECTION}"
                elif [[ "$1" == "pref" ]]; then
                    bootstrap_section="${PREF_SECTION}"
                elif [[ "$1" == "extra" ]]; then
                    bootstrap_section="${EXTR_SECTION}"
                fi
            fi
        fi
    fi

    # Ask for the administrator password upfront
    sudo -v

    # Keep-alive: update existing `sudo` time stamp until script has finished
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

    # run init
    if [[ "${bootstrap_section}" -le "${INIT_SECTION}" ]]; then
        ../os/init.sh "${fresh}"
        exit_on_fail "Initialization failed"
        print_separator_large
        ((bootstrap_section+=1))
    fi

    # check and update git repo
    if [[ "${bootstrap_section}" -le "${REPO_SECTION}" ]]; then
        ../os/repository.sh "${fresh}"
        exit_on_fail "Repository check failed"
        print_separator_large
        ((bootstrap_section+=1))
    fi

    # create directories
    if [[ "${bootstrap_section}" -le "${DIR_SECTION}" ]]; then
        ../os/directories.sh "${fresh}"
        exit_on_fail "Directory creation failed"
        print_separator_large
        ((bootstrap_section+=1))
    fi

    # create symbolic links
    if [[ "${bootstrap_section}" -le "${LINK_SECTION}" ]]; then
        ../os/symlinks.sh "${fresh}"
        exit_on_fail "Symbolic link creation failed"
        print_separator_large
        ((bootstrap_section+=1))
    fi

    # ---

    # download/install applications
    if [[ "${bootstrap_section}" -le "${APPS_SECTION}" ]]; then
        ../os/apps.sh "${fresh}"
        exit_on_fail "Application installation failed"
        print_separator_large
        ((bootstrap_section+=1))
    fi

    # set preferences
    if [[ "${bootstrap_section}" -le "${PREF_SECTION}" ]]; then
        ../os/preferences.sh "${fresh}"
        exit_on_fail "Preferences failed"
        print_separator_large
        ((bootstrap_section+=1))
    fi

    # perform additional operations
    if [[ "${bootstrap_section}" -le "${EXTR_SECTION}" ]]; then
        ../os/extras.sh "${fresh}"
        print_separator_large
        ((bootstrap_section+=1))
    fi

    echo ""
    echo "$(cat "${INFO_FILE}")"

    print_section "Bootstrap script complete"
    print_info "Use 'cat ${INFO_FILE}' to display extra install information again"
    print_info "Use 'cat ${ERROR_FILE}' to display install errors"

    confirm "Do you want to restart?"
    if status_code && cmd_exists "shutdown"; then
        print_fix "Restarting now!"
        ../os/restart.sh
        # no need to kill sudo when restarting
    else
        print_fix "Manual restart required"
        end_prompt
        kill_sudo
    fi
}

# only pass in the first argument to main, no matter what options are provided
main "$1"
